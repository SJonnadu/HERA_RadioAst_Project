{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from pyuvdata import UVData\n",
    "from pyuvdata import UVFlag\n",
    "from hera_qm.hera_qm import xrfi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "h1c_data = \"/lustre/aoc/projects/hera/H1C_IDR2/2458098/zen.2458098.37904.HH.uvh5\"\n",
    "uvd = UVData()\n",
    "uvd.read_uvh5(h1c_data, antenna_nums=[0, 1])\n",
    "\n",
    "wf = uvd.get_data(0, 1)\n",
    "\n",
    "arx = uvd.get_flags(0, 1)\n",
    "\n",
    "# To read it back in\n",
    "#uvf_readin = UVFlag('uvflag.h5')\n",
    "#arx = uvf_readin.flag_array\n",
    "# is Nblts x Nspw x Nfreq x Npol and is boolean\n",
    "\n",
    "for x in range (len(arx[0][0])):\n",
    "    wf_xx = wf[:, :, x]\n",
    "    if x==0:\n",
    "        ary = xrfi.xrfi_waterfall(wf_xx)\n",
    "    else:\n",
    "        temp = xrfi.xrfi_waterfall(wf_xx)\n",
    "        ary = np.dstack([ary, temp])         \n",
    "    x += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def comparision (arx_int, ary_int):\n",
    "    \n",
    "    if np.shape(arx) != np.shape(ary):\n",
    "        raise Exception('Array sizes do not match.')\n",
    "\n",
    "    arx_int = arx.astype(int)\n",
    "    ary_int = ary.astype(int)\n",
    "    \n",
    "    temp_arr = arx_int + ary_int\n",
    "    totalcount = arx.size\n",
    "    true_match = np.count_nonzero(temp_arr==2)\n",
    "    false_match = np.count_nonzero(temp_arr==0)\n",
    "    \n",
    "    temp_arr = arx_int * -1\n",
    "    temp_arr = temp_arr + ary_int\n",
    "    tf_match = np.count_nonzero(temp_arr == -1)\n",
    "    ft_match = np.count_nonzero(temp_arr == 1)\n",
    "    \n",
    "    tp = true_match*100/totalcount\n",
    "    tn = false_match*100/totalcount\n",
    "    fp = tf_match*100/totalcount\n",
    "    fn = ft_match*100/totalcount\n",
    "\n",
    "# Calculate F2 Score\n",
    "    f2score = 0\n",
    "    prec_d = tp + fp\n",
    "    rec_d = tp + fn  \n",
    "    if prec_d > 0 and rec_d > 0:\n",
    "        precision = tp/(1.*prec_d)\n",
    "        recall = tp/(1.*rec_d)\n",
    "        f2score = 5.*precision*recall/(4.*precision+recall)\n",
    "\n",
    "# Calculate MCC\n",
    "    MCC = 0\n",
    "    if tp==0 and fn ==0:\n",
    "        MCC = (tp*tn - fp*fn)\n",
    "    else:\n",
    "        MCC_d = (tp+fp)*(tp+fn)*(tn+fp)*(tn+fn)\n",
    "        if MCC_d > 0:\n",
    "            MCC = (tp*tn - fp*fn)/np.sqrt((1.*MCC_d))\n",
    "    \n",
    "    return (f2score, MCC, tp, tn, fp, fn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F2 Score:  0.00\n",
      "MCC:  0.00\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'dat1' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-2b0cc45219da>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"F2 Score: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%.2f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mf2score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"MCC: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%.2f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mMCC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"True_x/True_y match: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%.2f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdat1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"False_x/False_y match: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%.2f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mfalse_match\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"True_x/False_y match: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%.2f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mtf_match\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"%\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'dat1' is not defined"
     ]
    }
   ],
   "source": [
    "f2score, MCC, true_match, false_match, tf_match, ft_match = comparision(arx, ary)\n",
    "\n",
    "print(\"F2 Score: \", \"%.2f\" % f2score)\n",
    "print(\"MCC: \", \"%.2f\" % MCC)\n",
    "print(\"True_x/True_y match: \", \"%.2f\" % dat1[0], \"%\")\n",
    "print(\"False_x/False_y match: \", \"%.2f\" % false_match, \"%\")\n",
    "print(\"True_x/False_y match: \", \"%.2f\" % tf_match, \"%\")\n",
    "print(\"False_x/True_y match: \", \"%.2f\" % ft_match, \"%\")    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
